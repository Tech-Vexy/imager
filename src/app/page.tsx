"use client";

import { useState, useCallback } from "react";
import { Download } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";

type GeneratedImage = {
    url: string;
    id: string;
};

export default function Home() {
    const [prompt, setPrompt] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState("");
    const [generatedImages, setGeneratedImages] = useState<GeneratedImage[]>([]);
    const [selectedImage, setSelectedImage] = useState<string | null>(null);
    const [isModalOpen, setIsModalOpen] = useState(false);

    const generateImages = useCallback(async () => {
        if (!prompt) return;
        setIsLoading(true);
        setError("");

        try {
            const response = await fetch("/api", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ prompt }),
            });

            if (!response.ok) {
                throw new Error("Failed to generate images");
            }

            const result = await response.json();
            setGeneratedImages(result.images.map((url: string) => ({ url, id: crypto.randomUUID() })));
        } catch (error) {
            setError(`Error occurred: ${error instanceof Error ? error.message : String(error)}`);
        } finally {
            setIsLoading(false);
        }
    }, [prompt]);

    const downloadImage = useCallback(async (imageUrl: string) => {
        try {
            const response = await fetch(imageUrl);
            const blob = await response.blob();
            const blobUrl = URL.createObjectURL(blob);

            const link = document.createElement("a");
            link.href = blobUrl;
            link.download = `image-${Date.now()}.png`;
            link.click();

            URL.revokeObjectURL(blobUrl);
        } catch (error) {
            console.error("Error downloading the image:", error);
        }
    }, []);

    const shareImage = useCallback(async (imageUrl: string) => {
        if (navigator.share) {
            try {
                // Create a Blob from the image URL
                const response = await fetch(imageUrl);
                const blob = await response.blob();

                // Create a File object from the Blob
                const file = new File([blob], 'generated-image.png', { type: blob.type });

                await navigator.share({
                    title: 'Share This Image',
                    text: 'Check out this image generated by AI!',
                    files: [file],
                });
                console.log('Image shared successfully');
            } catch (error) {
                console.error('Error sharing:', error);
                alert('Failed to share the image. It might not be supported on this device or browser.');
            }
        } else {
            alert('Sharing is not supported by this browser.');
        }
    }, []);

    const clearAll = useCallback(() => {
        setPrompt("");
        setError("");
        setGeneratedImages([]);
    }, []);

    return (
        <main className="flex min-h-screen w-full bg-gray-900 flex-col items-center justify-center px-8 py-12">
            <h1 className="text-5xl mb-4 text-white">Imager</h1>
            <div className="mb-4 text-white text-center">
                Generate images from text prompts using AI.
            </div>
            <div className="flex flex-col items-center w-full max-w-md">
                <div className="w-full flex">
                    <Input
                        type="text"
                        className="flex-grow"
                        placeholder="Enter a prompt..."
                        value={prompt}
                        onChange={(event) => setPrompt(event.target.value)}
                    />
                    <Button
                        className="ml-2 bg-blue-500"
                        onClick={generateImages}
                        disabled={isLoading || !prompt}
                    >
                        {isLoading ? "Generating..." : "Go!"}
                    </Button>
                </div>
            </div>

            {error && <Alert variant="destructive"><AlertDescription>{error}</AlertDescription></Alert>}

            {isLoading && (
                <div className="absolute inset-0 flex items-center justify-center">
                    <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-blue-600"></div>
                </div>
            )}

            <div className="grid grid-cols-2 gap-4 mt-8 w-full px-4">
                {generatedImages.map(({url, id}) => (
                    <Card key={id} className="relative p-2 bg-white shadow-md">
                        <CardContent className="p-0">
                            <img
                                src={url}
                                alt={`Generated Image ${id}`}
                                className="w-full h-auto cursor-pointer rounded-sm"
                                onClick={() => {
                                    setSelectedImage(url);
                                    setIsModalOpen(true);
                                }}
                            />
                            <div className="flex justify-between mt-2">
                                <Button onClick={() => shareImage(url)}>Share</Button>
                                <Button onClick={() => downloadImage(url)}>
                                    <Download className="mr-2 h-4 w-4"/> Download
                                </Button>
                            </div>
                        </CardContent>
                    </Card>
                ))}
            </div>

            {isModalOpen && selectedImage && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-75">
                    <div className="relative w-auto max-w-3xl">
                        <Button
                            className="absolute top-2 right-2"
                            variant="ghost"
                            onClick={() => {
                                setIsModalOpen(false);
                                setSelectedImage(null);
                            }}
                        >
                            &times;
                        </Button>
                        <img src={selectedImage} alt="Selected" className="w-full h-auto rounded-lg"/>
                    </div>
                </div>
            )}

            <Button variant="destructive" className="mt-4 bg-white" onClick={clearAll}>
                Clear
            </Button>
        </main>
    );
}
